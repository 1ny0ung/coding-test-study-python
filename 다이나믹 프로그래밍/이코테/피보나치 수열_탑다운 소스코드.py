### 피보나치 수열: 탑다운 다이나믹 프로그래밍 소스 코드 ###
# 별도의 배열/리스트 만들어 해당 문제가 해결된 적 있는 문제인지 아닌지, 이미 해결되었다면 그 값을 저장하여 문제 해결! 

# 한 번 계산된 결과를 메모이제이션(Memoization) 하기 위한 리스트 초기화
# 100 개의 원소를 가지는 리스트 -> 0~99의 인덱스를 가지게 됨 -> 예제에서 fibo(99) 구하므로!
# 각 인덱스에 해당하는 결과를 0으로 초기화
d = [0] * 100

# 피보나치 함수를 재귀함수로 구현(탑다운 다이나믹 프로그래밍)
def fibo(x):
    # 종료 조건(1 혹은 2일 때 1을 반환)
    if x == 1 or x == 2: 
        return 1
    # 이미 계산된 적 있는 문제라면 그대로 반환
    # 이미 계산된 적 있다면 dp 테이블의 값이 초기값인 0 이 아님 -> 이를 그대로 반환
    if d[x] != 0:
        return d[x]
    # 아직 계산하지 않은 문제라면 점화식에 따라서 피보나치 결과 반환
    # 새로운 문제를 해결해야 하는 경우 앞 2 개의 원소 값을 더하여 dp 테이블에 저장 후 그 값을 반환함.
    else:
        d[x] = fibo(x-2) + fibo(x-1)
        return d[x]

print(fibo(99))